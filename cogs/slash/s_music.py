from config import settings

import asyncio
import datetime

import discord
from discord.errors import ClientException
from discord import app_commands
from discord.ext import commands

from yt_dlp import YoutubeDL, utils

YDL_OPTIONS = {'format': 'bestaudio', 'noplaylist': 'True', 'quiet': True}
FFMPEG_OPTIONS = {'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5', 'options': '-vn'}


class Queue:
    def __init__(self):
        self.__vc = None
        self.__queue = []
        self.__playing_now = None

    def add_track(self, title):
        self.__queue.append(title)

    def play_next(self):
        if len(self.__queue) > 0:
            next_track = self.__queue.pop(0)
            self.__playing_now = next_track
            return next_track
        else:
            return 0

    def get_playing_now(self):
        print(self.__playing_now)
        return self.__playing_now

    def set_playing_now(self, track):
        self.__playing_now = track

    def clear(self):
        self.__queue = []
        self.__playing_now = None

    def is_empty(self):
        if len(self.__queue):
            return False
        else:
            return True

    def length(self):
        return len(self.__queue)

    def get_by_id(self, id):
        return self.__queue[id]


class SMusic(commands.Cog):
    """Music"""

    def __init__(self, bot):
        self.bot = bot
        self.__queue = Queue()
        self.vc = None

    def __get_info(self, song):
        video = None
        with YoutubeDL(YDL_OPTIONS) as ydl:
            # noinspection PyExceptClausesOrder
            try:
                video = ydl.extract_info(f"ytsearch3:{song}", download=False)['entries']
                return video
            except utils.DownloadError:  # If not found video by basic searching
                video = ydl.extract_info(song, download=False)
                return video
            except utils.DownloadError:  # If url was not found
                raise IndexError()

    class PlayerButtons(discord.ui.View):
        def __init__(self, voice_chat, leave, stop, pause, resume, skip):
            super().__init__()
            self.__vc = voice_chat
            self.__leave = leave
            self.__stop = stop
            self.__pause = pause
            self.__resume = resume
            self.__skip = skip

        @discord.ui.button(style=discord.ButtonStyle.red, label='–í—ã—Ö–æ–¥', emoji='üö™')
        async def button_leave(self, interaction: discord.Interaction, button: discord.ui.Button):
            await interaction.response.send_message("–•–æ—Ä–æ—à–æ –±–ª–∏–Ω, —É—Ö–æ–∂—É, —Ç—É–ø–æ–π —Ç—ã –¥–µ–±–∏–ª",
                                                         delete_after=8)
            self.__leave()

        @discord.ui.button(style=discord.ButtonStyle.red, label='–°—Ç–æ–ø', emoji='üõë')
        async def button_stop(self, interaction: discord.Interaction, button: discord.ui.Button):
            await interaction.response.send_message("–•–æ—Ä–æ—à–æ, —Ç–æ—Ä–º–æ–∑–Ω—É–ª",
                                                         delete_after=8)
            self.__stop()

        @discord.ui.button(style=discord.ButtonStyle.blurple, label='–ü–∞—É–∑–∞ / –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', emoji='‚èØÔ∏è')
        async def button_pause_resume(self, interaction: discord.Interaction, button: discord.ui.Button):
            if self.__vc.is_playing():
                await interaction.response.send_message("–£—Å—ë, —É—Å—ë, –ø–∞—É–∑–∞",
                                                             delete_after=8)
                self.__vc.pause()
            elif self.__vc.is_paused():
                await interaction.response.send_message("–ò–≥—Ä–∞–µ–º –¥–∞–ª—å—à–µ, –∑–Ω–∞—á–∏—Ç. –¢—ã –∑–∞–¥–æ–ª–±–∞–ª",
                                                             delete_after=8)
                self.__vc.resume()

        @discord.ui.button(style=discord.ButtonStyle.blurple, label='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', emoji='‚è≠Ô∏è')
        async def button_skip(self, interaction: discord.Interaction, button: discord.ui.Button):
            await interaction.response.send_message("–≠—Ç—É –ø–µ—Å–Ω—é –º—ã –ø–æ–ø—É—Å–∫–∞–µ–º, –ø–æ—Ç–æ–º—É —á—Ç–æ –≥–∏–≤–Ω–æ",
                                                         delete_after=8)
            self.__skip(interaction)

    async def __play(self, interaction, video):
        self.vc.play(discord.FFmpegPCMAudio(executable=settings['path_to_ffmpeg'],
                                              source=video.get("url"), **FFMPEG_OPTIONS),
                       after=lambda e: self.__skip(interaction=interaction))

        duration = video.get("duration")
        upload_date = video.get("upload_date")
        upload_date = f"{upload_date[:4]}.{upload_date[4:6]}.{upload_date[6:]}"
        embed = (discord.Embed(title=f'{self.bot.get_emoji(settings["emojis"]["youtube"])} –©–∞—Å —à–ø–∏–ª–∏—Ç',
                               description=f"**{video.get('title')}**",
                               color=0xff2a2a)
                 .add_field(name="üë§ –ê–≤—Ç–æ—Ä", value=video.get("uploader"), inline=False)
                 .add_field(name="‚åõ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", value=datetime.timedelta(seconds=duration))
                 .add_field(name="üìÖ –î–∞—Ç–∞ –ó–∞–≥—Ä—É–∑–∫–∏", value=upload_date)
                 .add_field(name="üëç –ö–æ–ª-–≤–æ –õ–∞–π–∫–æ–≤", value=video.get('like_count', '–°–∫—Ä—ã—Ç–æ'), inline=False)
                 .add_field(name="üîî –ó–∞–ø—Ä–æ—Å–∏–ª", value=interaction.user.name, inline=False)
                 .set_thumbnail(url=video.get("thumbnail")))
        await interaction.followup.send(embed=embed, view=self.PlayerButtons(self.vc,
                                                                             self.__leave,
                                                                             self.__stop,
                                                                             self.__pause,
                                                                             self.__resume,
                                                                             self.__skip))

        title = video.get('title')
        self.__queue.set_playing_now(title)
        await self.bot.change_presence(activity=discord.Activity(type=discord.ActivityType.listening, name=title))

    def __skip(self, interaction):
        asyncio.run_coroutine_threadsafe(self.bot.change_presence(status=discord.Status.online,
                                         activity=discord.Game(f"{settings.get('prefix')}help")), self.bot.loop)
        if self.vc.is_playing():
            self.vc.pause()
        if not self.__queue.is_empty():
            next_track = self.__queue.play_next()
            asyncio.run_coroutine_threadsafe(self.__play(interaction, next_track), self.bot.loop)

    def __stop(self):
        asyncio.run_coroutine_threadsafe(
            self.bot.change_presence(status=discord.Status.online,
                                     activity=discord.Game(f"{settings.get('prefix')}help")),
            self.bot.loop)

        self.__queue.clear()
        if self.vc.is_playing():
            self.vc.stop()
        elif self.vc.is_paused():
            self.vc.stop()

    def __leave(self):
        asyncio.run_coroutine_threadsafe(
            self.bot.change_presence(status=discord.Status.online,
                                     activity=discord.Game(f"{settings.get('prefix')}help")),
            self.bot.loop)
        self.__pause()
        asyncio.run_coroutine_threadsafe(self.vc.disconnect(), self.bot.loop)

    def __pause(self):
        if not self.vc.is_paused():
            self.vc.pause()

    def __resume(self):
        if not not self.vc.is_playing():
            self.vc.resume()

    class SelectSongButtons(discord.ui.View):
        def __init__(self):
            super().__init__(timeout=30)
            self.value = None

        @discord.ui.button(style=discord.ButtonStyle.blurple, emoji='1Ô∏è‚É£')
        async def button_first(self, interaction: discord.Interaction, button: discord.ui.Button):
            await interaction.response.send_message("–•–∞—Ä–æ—à, –≤—ã–±—Ä–∞–Ω–∞ –ø–µ—Ä–≤–∞—è –ø–µ—Å–Ω—è")
            self.value = 0
            self.stop()

        @discord.ui.button(style=discord.ButtonStyle.blurple, emoji='2Ô∏è‚É£')
        async def button_second(self, interaction: discord.Interaction, button: discord.ui.Button):
            await interaction.response.send_message("–û–∫–µ–π, –±—É–¥–µ—Ç —Ç–µ–±–µ –≤—Ç–æ—Ä–∞—è –ø–µ—Å–Ω—è")
            self.value = 1
            self.stop()

        @discord.ui.button(style=discord.ButtonStyle.blurple, emoji='3Ô∏è‚É£')
        async def button_third(self, interaction: discord.Interaction, button: discord.ui.Button):
            await interaction.response.send_message("–õ–∞–Ω–∞, –≤—Ä—É–±–∞—é —Ç—Ä–µ—Ç—å—é")
            self.value = 2
            self.stop()

    @app_commands.command(name="play", description="–í—Ä—É–±–∞–µ—Ç –ø–µ—Å–Ω—é")
    @app_commands.describe(song="—Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞")
    async def play(self, interaction: discord.Interaction,
                   song: str):
        if interaction.user.voice is not None:
            try:
                self.vc = await interaction.user.voice.channel.connect()
            except ClientException:
                pass
        else:
            await interaction.response.send_message("–¢—ã –Ω–µ –ø–æ–¥—Ä—É–±–ª–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É")
            return

        await interaction.response.send_message(f"–ò—â—É –ø–µ—Å–Ω—é –ø–æ –∑–∞–ø—Ä–æ—Å—É **\"{song}\"**, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ")
        reply = await interaction.original_response()

        videos = self.__get_info(song)
        view = self.SelectSongButtons()
        embed = (discord.Embed(title=f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{song}\"", color=0xf0cd4f))
        for i in range(3):
            upload_date = f"{videos[i]['upload_date'][:4]}.{videos[i]['upload_date'][4:6]}.{videos[i]['upload_date'][6:]}"
            embed.add_field(name=f"{i + 1}. {videos[i].get('title')}",
                            value=f"üë§ {videos[i]['uploader']} \n"
                                  f"‚è≥ {datetime.timedelta(seconds=videos[i]['duration'])} \n"
                                  f"üìÖ {upload_date}",
                            inline=False)
        await reply.edit(content="", embed=embed, view=view)
        await view.wait()

        if view.value is None:
            await reply.edit(content="## ‚åõ –¢–∞–π–º–∞—É—Ç \n"
                                     "–í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ –¥—É–º–∞–π, **–∫—Ä–µ—Ç–∏–Ω**. \n"
                                     "–ë–æ–ª—å—à–µ 30 —Å–µ–∫—É–Ω–¥ –∂–¥–∞—Ç—å –Ω–µ —Å–æ–±–∏—Ä–∞—é—Å—å, **—É—Ä–æ–¥–∏–Ω–∞** –±–µ–ª–æ–ø–æ–ª—å–Ω–∞—è", embed=None, view=None)
            return
        try:
            vid = videos[view.value]
        except IndexError:
            await interaction.response.send_message(":x: –¢—ã –¥–µ–±–∏–ª–∫–∞ —Ç—É–ø–∞—è! –ß–¢–û –ó–ê –ì–û–í–ù–û –¢–´ –í–´–°–†–ê–õ?! "
                                                    "–ö–ê–ö –Ø –ú–û–ì–£ –¢–ï–ë–ï –≠–¢–£ –•–ï–†–ï–°–¨ –ù–ê–ô–¢–ò?!!??!?!?!?1!!7!?!")
            await self.vc.disconnect()
            return

        if not self.vc.is_playing():
            await self.__play(interaction, vid)
        else:
            self.__queue.add_track(vid)
            await interaction.followup.send(f"**{vid.get('title')}** –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫, –±–ª—è.")

    @app_commands.command(name="switch_pause", description="–°—Ç–∞–≤–∏—Ç –Ω–∞ –ø–∞—É–∑—É/–≤—Ä—É–±–∞–µ—Ç —Ç–≤–æ–π –≥–æ–≤–Ω–æ–º—É–∑–æ–Ω")
    async def switch_pause(self, interaction: discord.Interaction):
        if self.vc is not None:
            if self.vc.is_playing():
                await interaction.response.send_message("–£—Å—ë, —É—Å—ë, –ø–∞—É–∑–∞")
                self.vc.pause()
            elif self.vc.is_paused():
                await interaction.response.send_message("–ò–≥—Ä–∞–µ–º –¥–∞–ª—å—à–µ, –∑–Ω–∞—á–∏—Ç. –¢—ã –∑–∞–¥–æ–ª–±–∞–ª")
                self.vc.resume()
        else:
            await interaction.response.send_message("–ë–æ—Ç –Ω–µ –ø–æ–¥—Ä—É–±–ª–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É")

    @app_commands.command(name="skip", description="–°–∫–∏–ø–∞–µ—Ç –º—É–∑–æ–Ω")
    async def skip(self, interaction: discord.Interaction):
        if self.vc is not None:
            self.__skip(interaction)
            await interaction.response.send_message("–Ø —Å–∫–∏–ø–∞—é —Ç–≤–æ—é —Ö—Ä–µ–Ω–æ–º—É–∑—ã–∫—É")
        else:
            await interaction.response.send_message("–ë–æ—Ç –Ω–µ –ø–æ–¥—Ä—É–±–ª–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É")

    @app_commands.command(name="stop", description="–°—Ç–æ–ø–∞–µ—Ç –º—É–∑–æ–Ω, –∏ —á–∏—Å—Ç–∏—Ç —Å–ø–∏—Å–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
    async def stop(self, interaction: discord.Interaction):
        if self.vc is not None:
            self.__stop()
            await interaction.response.send_message("–Ø –°–¢–û–ü–ê–Æ –ú–£–ó–û–û–ù –ù–ê–•üîû–£–£–ô")
        else:
            await interaction.response.send_message("–ë–æ—Ç –Ω–µ –ø–æ–¥—Ä—É–±–ª–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É")

    @app_commands.command(name="leave", description="–í—ã—Ö–æ–¥–∏—Ç –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞")
    async def leave(self, interaction: discord.Interaction):
        if self.vc is not None:
            await self.vc.disconnect()
            await interaction.response.send_message("–Ø –õ–ò–í–ê–Æ –ù–ê–•üîû–£–£–ô")
        else:
            await interaction.response.send_message("–ë–æ—Ç –Ω–µ –ø–æ–¥—Ä—É–±–ª–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É")

    @app_commands.command(name="queue", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–µ—Å–µ–Ω")
    async def queue_embed(self, interaction: discord.Interaction):
        now = self.__queue.get_playing_now()
        if now != None:
            embed = (discord.Embed(title="üìú –°–ø–∏—Å–æ–∫ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è", color=0xf0cd4f))
            embed.add_field(name="‚ñ∂Ô∏è –°–µ–π—á–∞—Å –ò–≥—Ä–∞–µ—Ç", value=now, inline=False)
            for i in range(self.__queue.length()):
                video = self.__queue.get_by_id(i)
                embed.add_field(name=f"{i + 1} –ø–æ —Å–ø–∏—Å–∫—É", value=video.get('title'), inline=False)
            await interaction.response.send_message(embed=embed)
        else:
            embed = (discord.Embed(title="üìú –°–ø–∏—Å–æ–∫ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è",
                                   color=0xf0cd4f,
                                   description="–°–ø–∏—Å–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø—É—Å—Ç."))
            await interaction.response.send_message(embed=embed)


async def setup(bot):
    await bot.add_cog(SMusic(bot))
